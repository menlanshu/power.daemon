// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PowerDaemon.Central.Data;

#nullable disable

namespace PowerDaemon.Central.Migrations
{
    [DbContext(typeof(PowerDaemonContext))]
    [Migration("20250819151535_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PowerDaemon.Shared.Models.Deployment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ConfigurationChanges")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeployedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("DeploymentNotes")
                        .HasColumnType("text");

                    b.Property<string>("DeploymentStrategy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<string>("PackageChecksum")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("PackagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("PackageSizeMb")
                        .HasColumnType("numeric");

                    b.Property<string>("PreviousVersion")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("RollbackDeploymentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("RollbackDeploymentId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("Status");

                    b.HasIndex("ServiceId", "Version");

                    b.ToTable("Deployments");
                });

            modelBuilder.Entity("PowerDaemon.Shared.Models.Metric", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("MetricName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("MetricType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Tags")
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ServerId", "Timestamp");

                    b.HasIndex("ServiceId", "Timestamp");

                    b.HasIndex("MetricType", "MetricName", "Timestamp");

                    b.ToTable("Metrics");
                });

            modelBuilder.Entity("PowerDaemon.Shared.Models.Server", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AgentStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AgentVersion")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ConnectionString")
                        .HasColumnType("text");

                    b.Property<int?>("CpuCores")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Environment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Hostname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastHeartbeat")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OsType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("OsVersion")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Tags")
                        .HasColumnType("text");

                    b.Property<int?>("TotalMemoryMb")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AgentStatus");

                    b.HasIndex("Hostname")
                        .IsUnique();

                    b.HasIndex("LastHeartbeat");

                    b.HasIndex("OsType");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("PowerDaemon.Shared.Models.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConfigFilePath")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomMetrics")
                        .HasColumnType("text");

                    b.Property<string>("Dependencies")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ExecutablePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HealthCheckUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastStartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("Port")
                        .HasColumnType("integer");

                    b.Property<int?>("ProcessId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uuid");

                    b.Property<string>("ServiceAccount")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("ServiceTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("StartupType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("WorkingDirectory")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("Status");

                    b.HasIndex("ServerId", "Name");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("PowerDaemon.Shared.Models.ServiceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConfigurationTemplate")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DefaultPortRange")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("DeploymentScript")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("HealthCheckTemplate")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ServiceTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(2025, 8, 19, 15, 15, 35, 123, DateTimeKind.Utc).AddTicks(2690),
                            DefaultPortRange = "8000-8099",
                            Description = "Service Type A",
                            IsActive = true,
                            Name = "TypeA",
                            UpdatedAt = new DateTime(2025, 8, 19, 15, 15, 35, 123, DateTimeKind.Utc).AddTicks(2680)
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedAt = new DateTime(2025, 8, 19, 15, 15, 35, 123, DateTimeKind.Utc).AddTicks(2700),
                            DefaultPortRange = "8100-8199",
                            Description = "Service Type B",
                            IsActive = true,
                            Name = "TypeB",
                            UpdatedAt = new DateTime(2025, 8, 19, 15, 15, 35, 123, DateTimeKind.Utc).AddTicks(2700)
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedAt = new DateTime(2025, 8, 19, 15, 15, 35, 123, DateTimeKind.Utc).AddTicks(2700),
                            DefaultPortRange = "8200-8299",
                            Description = "Service Type C",
                            IsActive = true,
                            Name = "TypeC",
                            UpdatedAt = new DateTime(2025, 8, 19, 15, 15, 35, 123, DateTimeKind.Utc).AddTicks(2700)
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedAt = new DateTime(2025, 8, 19, 15, 15, 35, 123, DateTimeKind.Utc).AddTicks(2700),
                            DefaultPortRange = "8300-8399",
                            Description = "Service Type D",
                            IsActive = true,
                            Name = "TypeD",
                            UpdatedAt = new DateTime(2025, 8, 19, 15, 15, 35, 123, DateTimeKind.Utc).AddTicks(2700)
                        });
                });

            modelBuilder.Entity("PowerDaemon.Shared.Models.Deployment", b =>
                {
                    b.HasOne("PowerDaemon.Shared.Models.Deployment", "RollbackDeployment")
                        .WithMany()
                        .HasForeignKey("RollbackDeploymentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PowerDaemon.Shared.Models.Service", "Service")
                        .WithMany("Deployments")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RollbackDeployment");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("PowerDaemon.Shared.Models.Metric", b =>
                {
                    b.HasOne("PowerDaemon.Shared.Models.Server", "Server")
                        .WithMany()
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PowerDaemon.Shared.Models.Service", "Service")
                        .WithMany("Metrics")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Server");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("PowerDaemon.Shared.Models.Service", b =>
                {
                    b.HasOne("PowerDaemon.Shared.Models.Server", "Server")
                        .WithMany("Services")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PowerDaemon.Shared.Models.ServiceType", "ServiceType")
                        .WithMany("Services")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Server");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("PowerDaemon.Shared.Models.Server", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("PowerDaemon.Shared.Models.Service", b =>
                {
                    b.Navigation("Deployments");

                    b.Navigation("Metrics");
                });

            modelBuilder.Entity("PowerDaemon.Shared.Models.ServiceType", b =>
                {
                    b.Navigation("Services");
                });
#pragma warning restore 612, 618
        }
    }
}
